{"version":3,"sources":["logo.svg","NavBar/NavBar.js","Charts/UnitedStatesCases.js","Charts/IndiaCases.js","Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","UnitedStatesCases","props","state","error","isLoaded","items","fetch","then","res","json","result","setState","console","log","this","getUS_Timeline","data","objectArray","day","totalDeaths","totalCases","key","Date","obj","new_daily_deaths","new_daily_cases","dates","Number","push","pop","arrangeForGraph","deathsToday","length","deathsYesterday","totalDeathsToday","totalDeathsYesterday","casesToday","casesYesterday","totalCasesToday","totalCasesYesterday","pctChange_deathsToday","toFixed","pctChange_totalDeathsToday","pctChange_casesToday","pctChange_totalCasesToday","className","width","height","margin","top","right","left","bottom","stroke","strokeDasharray","dataKey","type","style","color","Component","IndiaCases","getIndiaData","Home","showIndia","handleClickIndia","bind","handleClickUS","class","onClick","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.876ff516.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport NavBarHome from './NavBarHome';\nimport NavBarBrand from './NavBarBrand';\nimport NavBarProfile from './NavBarProfile';\nimport NavBarWatchList from './NavBarWatchList';\nimport NavBarSignIn from './NavBarSignIn';\nimport NavBarSearch from './NavBarSearch';\n\n\nfunction NavBar() {\n    return (\n        <div className='container-fullwidth'>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <NavBarBrand />\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\" justify-content-center=\"true\">\n                        <NavBarHome />\n                        <NavBarProfile />\n                        <NavBarWatchList />\n                    </ul>\n                    \n                    <NavBarSearch />\n                    <NavBarSignIn />\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport {\n  LineChart,\n  ResponsiveContainer,\n  ResponsiveContainerProps,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n  ComposedChart,\n  Area,\n  Bar\n} from \"recharts\";\n\n\n\n\nclass UnitedStatesCases extends Component {\n\n    constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  getUS_Timeline() {\n    fetch('https://cors-anywhere.herokuapp.com/https://thevirustracker.com/free-api?countryTimeline=US')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          // console.log(result);\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log('Could not access data');\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  componentDidMount() {\n    this.getUS_Timeline();\n  }\n\n  arrangeForGraph() {\n    var data = this.state.items;\n    var objectArray = [];\n    var day = 1;\n    var totalDeaths = 0;\n    var totalCases = 0;\n    \n    for(var key in data['timelineitems'][0]) {\n      var date = new Date(key);\n\n      var obj = {\n              new_daily_deaths:data['timelineitems'][0][key]['new_daily_deaths'],\n              new_daily_cases:data['timelineitems'][0][key]['new_daily_cases'],\n              dates:key,\n              day: day,\n              totalCases: (totalCases + Number(data['timelineitems'][0][key]['new_daily_cases'])),\n              totalDeaths: (totalDeaths + Number(data['timelineitems'][0][key]['new_daily_deaths']))\n            }\n      totalDeaths = obj.totalDeaths;\n      totalCases = obj.totalCases;\n      objectArray.push(obj);\n      day += 1;\n    } \n    objectArray.pop();\n    \n    return objectArray;\n\n  }\n\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if(isLoaded) {\n      var data = this.arrangeForGraph(items);\n      console.log(data);   \n\n      var deathsToday = data[data.length-1].new_daily_deaths;\n      var deathsYesterday = data[data.length-2].new_daily_deaths;\n      var totalDeathsToday = data[data.length-1].totalDeaths;\n      var totalDeathsYesterday = data[data.length-2].totalDeaths;\n\n      var casesToday = data[data.length-1].new_daily_cases;\n      var casesYesterday = data[data.length-2].new_daily_cases;\n      var totalCasesToday = data[data.length-1].totalCases;\n      var totalCasesYesterday = data[data.length-2].totalCases;\n\n      var pctChange_deathsToday = ((deathsToday - deathsYesterday)/deathsYesterday).toFixed(2);\n      var pctChange_totalDeathsToday = ((totalDeathsToday - totalDeathsYesterday)/totalDeathsYesterday).toFixed(2);\n\n      var pctChange_casesToday = ((casesToday - casesYesterday)/casesYesterday).toFixed(2);\n      var pctChange_totalCasesToday = ((totalCasesToday - totalCasesYesterday)/totalCasesYesterday).toFixed(2);\n\n      return (\n              <div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                      <h4>United States Cases</h4>\n                    </div>\n                  </div>\n                <div className = \"row\">\n                  <div className=\"col recharts-wrapper\">\n                    <ResponsiveContainer width=\"100%\" height={500}>\n                        <LineChart data={data}\n                          margin={{\n                            top: 50,\n                            right: 200,\n                            left: 200,\n                            bottom: 50\n                          }\n                          }\n                        >\n                        <CartesianGrid stroke=\"#efe\" strokeDasharray=\"1 1\"/>\n                          <XAxis dataKey=\"dates\"/>\n                          <YAxis/>\n                          <Tooltip />\n                          <Legend />\n                          <Line type=\"monotone\" dataKey=\"new_daily_cases\" stroke=\"#8884d8\" />\n                          <Line type=\"monotone\" dataKey=\"new_daily_deaths\" stroke=\"#82ca9d\" />\n                        </LineChart>\n                        </ResponsiveContainer>\n                      </div>\n                  </div>\n                  <div className=\"row\">\n                          <div className=\"col\">\n                            <h4>Deaths Today: {deathsToday} </h4>\n                            <p>{(pctChange_deathsToday >= 0) && <p style={{color:'green'}}> +{pctChange_deathsToday}%</p> }\n                            {(pctChange_deathsToday < 0) && <p style={{color:'red'}}> {pctChange_deathsToday}%</p>\n                            }</p>\n                            <h4>Total Deaths: {totalDeathsToday} </h4>\n                            <p>{(pctChange_totalDeathsToday >= 0) && <p style={{color:'green'}}> +{pctChange_totalDeathsToday}%</p> }\n                            {(pctChange_totalDeathsToday < 0) && <p style={{color:'red'}}> {pctChange_totalDeathsToday}%</p>\n                            }</p>\n                          </div>\n                          <div className=\"col\">\n                          <h4>Cases Today: {casesToday} </h4>\n                            <p>{(pctChange_casesToday >= 0) && <p style={{color:'green'}}> +{pctChange_casesToday}%</p> }\n                            {(pctChange_casesToday < 0) && <p style={{color:'red'}}> {pctChange_casesToday}%</p>\n                            }</p>\n                            <h4>Total Cases: {totalCasesToday} </h4>\n                            <p>{(pctChange_totalCasesToday >= 0) && <p style={{color:'green'}}> +{pctChange_totalCasesToday}%</p> }\n                            {(pctChange_totalCasesToday < 0) && <p style={{color:'red'}}> {pctChange_totalCasesToday}%</p>\n                            }</p>\n                          </div>\n                  </div>\n              </div>\n\n          );\n    }\n\n    return (\n        <p>Loading graph...</p>\n      )\n  }\n\n}\n\nexport default UnitedStatesCases;","import React, { Component } from 'react';\nimport {\n  LineChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n  ComposedChart,\n  Area,\n  Bar\n} from \"recharts\";\n\n\n\n\nclass IndiaCases extends Component {\n\n    constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  getIndiaData() {\n    fetch('https://api.covid19india.org/data.json')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log('Could not access data');\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  componentDidMount() {\n    this.getIndiaData();\n  }\n\n  arrangeForGraph() {\n    var data = this.state.items;\n    var objectArray = [];\n    var day = 1;\n    var totalDeaths = 0;\n    var totalCases = 0;\n    \n    for(var key in data['cases_time_series']) {\n\n      var obj = {\n              new_daily_deaths:data['cases_time_series'][key]['dailydeceased'],\n              new_daily_cases:data['cases_time_series'][key]['dailyconfirmed'],\n              dates:data['cases_time_series'][key]['date'],\n              day: day,\n              totalDeaths: (totalDeaths+Number(data['cases_time_series'][key]['dailydeceased'])),\n              totalCases: (totalCases+Number(data['cases_time_series'][key]['dailyconfirmed']))\n            }\n      totalDeaths = obj.totalDeaths;\n      totalCases = obj.totalCases;\n      objectArray.push(obj);\n      day += 1;\n    } \n\n    objectArray.pop();\n    \n    return objectArray;\n\n  }\n\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if(isLoaded) {\n      var data = this.arrangeForGraph(items);\n      console.log(data);   \n\n      return (\n        <div>\n          <div className=\"row\">\n              <div className=\"col\">\n                <h4>India Cases</h4>\n              </div>\n            </div>\n          <div className = \"row\">\n            <div className=\"col recharts-wrapper\">\n              <ResponsiveContainer width=\"100%\" height={500}>\n                  <LineChart data={data}\n                    margin={{\n                      top: 50,\n                      right: 200,\n                      left: 200,\n                      bottom: 50\n                    }\n                    }\n                  >\n                  <CartesianGrid stroke=\"#efe\" strokeDasharray=\"1 1\"/>\n                    <XAxis dataKey=\"dates\"/>\n                    <YAxis/>\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"new_daily_cases\" stroke=\"#8884d8\" />\n                    <Line type=\"monotone\" dataKey=\"new_daily_deaths\" stroke=\"#82ca9d\" />\n                  </LineChart>\n                  </ResponsiveContainer>\n                </div>\n            </div>\n            <div className=\"row\">\n                          <div className=\"col\">\n                        <h6>Deaths Today: {data[data.length-1].new_daily_deaths}</h6>\n                  <h6>Total Deaths: {data[data.length-1].totalDeaths}</h6>\n                          </div>\n                          <div className=\"col\">\n                          <h6>Cases Today: {data[data.length-1].new_daily_cases}</h6>\n                          <h6>Total Cases: {data[data.length-1].totalCases}</h6>\n                          </div>\n                  </div>\n      </div>\n\n          );\n    }\n\n    return (\n        <p>Loading graph...</p>\n      )\n  }\n\n}\n\nexport default IndiaCases;","import React from 'react'\nimport USChart from '../Charts/UnitedStatesCases'\nimport IndiaChart from '../Charts/IndiaCases'\n\nclass Home extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          showIndia: false\n        };\n  \n      // This binding is necessary to make `this` work in the callback\n      this.handleClickIndia = this.handleClickIndia.bind(this);\n      this.handleClickUS = this.handleClickUS.bind(this);\n    }\n  \n    handleClickIndia() {\n      this.setState(state => ({\n        showIndia: true\n      }));\n    }\n\n    handleClickUS() {\n        this.setState(state => ({\n          showIndia: false\n        }));\n      }\n  \n    render() {\n        if(!this.state.showIndia)\n        {\n            return (\n                <div className=\"container-fluid\">\n                        <USChart />\n                    <div className=\"row\">\n                      <div className=\"col\">\n                          <div className=\"btn-group mr-2\">\n                              <button type=\"button\" class=\"btn btn-outline-primary btn-group\">\n                              United States\n                              </button>\n                            </div>\n                          <div className=\"btn-group\">\n                              <button type=\"button\" class=\"btn btn-outline-primary btn-group\" onClick={this.handleClickIndia}>\n                              India\n                              </button>\n                            </div>\n                        </div>\n                      </div>\n                </div>\n            );\n        }\n\n        return (\n                <div className=\"container-fluid\">\n                        <IndiaChart />\n                    <div className=\"row\">\n                      <div className=\"col\">\n                            <div className=\"btn-group mr-2\">\n                                <button type=\"button\" class=\"btn btn-outline-primary btn-group\" onClick={this.handleClickUS}>\n                                United States\n                                </button>\n                            </div>\n                            <div className=\"btn-group\">\n                                <button type=\"button\" class=\"btn btn-outline-primary btn-group\">\n                                India\n                                </button>\n                            </div>\n                            </div>\n                        </div>\n                </div>\n        )\n    }\n  }\n\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBar from './NavBar/NavBar'\nimport Home from \"./Home/Home\"\nimport Footer from './Footer/Footer'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}